pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/binodpj/sample-springboot-application'
      }
    }
    stage('Build and Test') {
      steps {
        // build the project and create a JAR file
        sh 'cd springboot-app && mvn clean package'
      }
    }
    // stage('Static Code Analysis') {
    //   environment {
    //     SONAR_URL = "http://172.178.112.147/"
    //   }
    //   steps {
    //     withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
    //       sh 'cd springboot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
    //     }
    //   }
    // }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "binod08/sample-springboot-app:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "springboot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd springboot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    // stage('Update Deployment File') {
    //     environment {
    //         GIT_REPO_NAME = "sample-springboot-application"
    //         GIT_USER_NAME = "binodpj"
    //     }
    //     steps {
    //         withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
    //             sh '''
    //                 git config user.email "joshibinodprasad08@gmail.com"
    //                 git config user.name "Binod"
    //                 BUILD_NUMBER=${BUILD_NUMBER}
    //                 sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" springboot-app-manifests/deployment.yml
    //                 git add deployment.yml
    //                 git commit -m "Updated deployment image to version ${BUILD_NUMBER}"
    //                 git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
    //             '''
    //         }
    //     }
    // }
    stage('Update Deployment File') {
       environment {
            GIT_REPO_NAME = "sample-springboot-application"
            GIT_USER_NAME = "binodpj"
        }
  steps {
    script {
      // Check if the file exists
      def fileExists = sh(script: 'test -f springboot-app-manifests/deployment.yml && echo "exists" || echo "does not exist"', returnStdout: true).trim()
      if (fileExists == 'exists') {
        // File exists, proceed with updating
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
        sh '''
          git config user.email "joshibinodprasad08@gmail.com"
          git config user.name "Binod"
          BUILD_NUMBER=${BUILD_NUMBER}
          sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" springboot-app-manifests/deployment.yml
          git add springboot-app-manifests/deployment.yml
          git commit -m "Updated deployment image to version ${BUILD_NUMBER}"
          git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
        '''
      }} else {
        error "The file deployment.yml does not exist!"
      }
    }
  }
}

  }
}